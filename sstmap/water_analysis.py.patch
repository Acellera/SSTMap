# Patch generated by Pyment v0.3.2

--- a/water_analysis.py
+++ b/water_analysis.py
@@ -63,8 +63,15 @@
 ##############################################################################
 
 class WaterAnalysis(object):
-    """Parent class for setting up water analysis calculations in molecular 
+    """Parent class for setting up water analysis calculations in molecular
     dynamics trajectories.
+
+    Parameters
+    ----------
+
+    Returns
+    -------
+
     """
 
     def __init__(self, topology_file, trajectory, start_frame=0,
@@ -129,13 +136,21 @@
         assert (self.wat_atom_ids.shape[0] + self.non_water_atom_ids.shape[0] == self.all_atom_ids.shape[0]), "Failed to partition atom indices in the system correctly!"
 
     def check_topology_requiremnts(self, top_file, support_file):
-        """
-        Performs a check on supplied topology and supporting files to determine if the
+        """Performs a check on supplied topology and supporting files to determine if the
         required files for this topology format are available for calculations and if
         checks are successful assigns combination rule corresponding to the format.
 
         Parameters
         ----------
+        top_file :
+            
+        support_file :
+            
+
+        Returns
+        -------
+
+        
         """
 
         topology_extension = top_file.split(".")[-1]
@@ -167,9 +182,15 @@
         a hydrogen-bond type to each atom and generate a dictionary of H-bond donors
         where indices of each connected hydrogen are stored for each donor.
 
+        Parameters
+        ----------
+
+        Returns
+        -------
+
         Notes
         -----
-        Several np.ndarray objects are generated and assigned as attributes 
+        Several np.ndarray objects are generated and assigned as attributes
         to WaterAnalysis object.
         """
 
@@ -259,9 +280,7 @@
             self.prot_hb_types[at_id] = 3
 
     def generate_nonbonded_params(self):
-        """
-        Obtains non-bonded parameters for each atom in the system.
-        """
+        """Obtains non-bonded parameters for each atom in the system."""
 
         # use parmed to get parameters
         self.water_sites = self.wat_oxygen_atom_ids[1] - self.wat_oxygen_atom_ids[0]
@@ -323,13 +342,20 @@
     def apply_combination_rules(self, water_sig, water_eps, vdw, rule=None):
         """
 
-        Args:
-            water_sig: 
-            water_eps: 
-            vdw: 
-            rule: 
-
-        :return:
+        Parameters
+        ----------
+        water_sig :
+            
+        water_eps :
+            
+        vdw :
+            
+        rule :
+            :return: (Default value = None)
+
+        Returns
+        -------
+
         """
         mixed_sig, mixed_eps = None, None
         acoeff, bcoeff = None, None
@@ -346,13 +372,19 @@
     def apply_combination_rules_old(self, water_sig, water_eps, vdw, rule=None):
         """
 
-        Args:
-            water_sig:
-            water_eps:
-            vdw:
-            rule:
-
-        Returns:
+        Parameters
+        ----------
+        water_sig :
+            
+        water_eps :
+            
+        vdw :
+            
+        rule :
+             (Default value = None)
+
+        Returns
+        -------
 
         """
 
@@ -370,7 +402,6 @@
         """Calculates total interaction energy of a water molecule with the rest of the
         system from the distance matrix and non-bonded parameter attributes of the WaterAnalysis object.
 
-        
         Parameters
         ----------
         distance_matrix : np.ndarray, float, shape=(K, N)
@@ -379,12 +410,8 @@
 
         Returns
         -------
-        energy_lj : np.ndarray, float, shape=(1, N_lj)
-            Array of lennard-Jones interaction energies of the water oxygen against all solute
-            particles and water oxygen atoms (N_lj) 
-        energy_elec : np.ndarray, float, shape=(K, N)
-            Array of electrostatic interaction energies of the water molecule against all atoms
-            in the system.        
+
+        
         """
         with np.errstate(invalid='ignore', divide='ignore'):
             wat_wat_dist_6 = distance_matrix[0, :][self.wat_oxygen_atom_ids] ** -6
@@ -414,24 +441,22 @@
     def calculate_hydrogen_bonds(self, traj, water, water_nbrs, solute_nbrs):
         """Calculates hydrogen bonds made by a water molecule with its first shell
         water and solute neighbors.
-        
+
         Parameters
         ----------
         traj : md.trajectory
-            MDTraj trajectory object for which hydrogen bonds are to be calculates. 
+            MDTraj trajectory object for which hydrogen bonds are to be calculates.
         water : int
             The index of water oxygen atom
         water_nbrs : np.ndarray, int, shape=(N^{ww}_nbr, )
             Indices of the water oxygen atoms in the first solvation shell of the water molecule.
         solute_nbrs : np.ndarray, int, shape=(N^{sw}_nbr, )
             Indices of thesolute atoms in the first solvation shell of the water molecule.
-        
-        Returns
-        -------
-        (hbonds_ww, hbonds_sw) : tuple
-            A tuple consisting of two np.ndarray objects for water-water and solute-water
-            hydrogen bonds. A hydrogen bond is represented by an array of indices
-            of three atom particpating in the hydrogen bond, [Donor, H, Acceptor]
+
+        Returns
+        -------
+
+        
         """
         hbond_data = []
         angle_triplets = []
@@ -457,24 +482,24 @@
     def calculate_hydrogen_bonds2(self, coords, water, water_nbrs, solute_nbrs):
         """Calculates hydrogen bonds made by a water molecule with its first shell
         water and solute neighbors.
-        
+
         Parameters
         ----------
         traj : md.trajectory
-            MDTraj trajectory object for which hydrogen bonds are to be calculates. 
+            MDTraj trajectory object for which hydrogen bonds are to be calculates.
         water : int
             The index of water oxygen atom
         water_nbrs : np.ndarray, int, shape=(N^{ww}_nbr, )
             Indices of the water oxygen atoms in the first solvation shell of the water molecule.
         solute_nbrs : np.ndarray, int, shape=(N^{sw}_nbr, )
             Indices of thesolute atoms in the first solvation shell of the water molecule.
-        
-        Returns
-        -------
-        (hbonds_ww, hbonds_sw) : tuple
-            A tuple consisting of two np.ndarray objects for water-water and solute-water
-            hydrogen bonds. A hydrogen bond is represented by an array of indices
-            of three atom particpating in the hydrogen bond, [Donor, H, Acceptor]
+        coords :
+            
+
+        Returns
+        -------
+
+        
         """
         angle_triplets = []
         for wat_nbr in water_nbrs:
@@ -500,6 +525,17 @@
 
     def calc_angle(self, coords, triplet):
         """
+
+        Parameters
+        ----------
+        coords :
+            
+        triplet :
+            
+
+        Returns
+        -------
+
         """
         dp = np.dot(coords[0, triplet[0], :] - coords[0, triplet[1], :], coords[0, triplet[2], :] - coords[0, triplet[1], :])
         norms = [np.linalg.norm(coords[0, triplet[0], :] - coords[0, triplet[1], :]), np.linalg.norm(coords[0, triplet[2], :] - coords[0, triplet[1], :])]
